Let's create the hello world Java program:

class Simple{  
    public static void main(String args[]){  
     System.out.println("Hello Java");  
    }  
}  

----------------------------------------------------------------------------------------------------------------------
To compile:
javac Simple.java

To execute:
java Simple

Output:
Hello Java
Compilation Flow:

When we compile Java program using javac tool, the Java compiler converts the source code into byte code.
--------------------------------------------------------------------------------------------------------------------------
Parameters used in First Java Program
Let's see what is the meaning of class, public, static, void, main, String[], System.out.println().

 
1.class keyword is used to declare a class in Java.
2.public keyword is an access modifier that represents visibility. It means it is visible to all.
3.static is a keyword. If we declare any method as static, it is known as the static method. The core advantage of the static method is that there is no need to create an object to invoke the static method. 
4.The main() method is executed by the JVM, so it does not require creating an object to invoke the main() method. So, it saves memory.
5.void is the return type of the method. It means it does not return any value.
6.The main() method represents the starting point of the program.
7.String[] args or String args[] is used for command line argument. We will discuss it in coming section.
8.System.out.println() is used to print statement on the console. Here, System is a class, out is an object of the PrintStream class, println() is a method of the PrintStream class. 
9.We will discuss the internal working of System.out.println() statement in the coming section.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Input in Java:-
package date1;

import java.util.*;

public class test2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//For Input create object of scanner class
		Scanner ob = new Scanner(System.in);
		
		System.out.println("input:");
		int a = ob.nextInt();
		int b = ob.nextInt();
		
		System.out.println("Sum of 2 nos:"+(a+b));
		
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------
Class in JAVA
import java.util.*;

public class test2 {
	
	int rollno;
	String name,address;
	
	void input() {
		Scanner ob = new Scanner(System.in);
		System.out.println("ENter rolln , name ,address");
		rollno = ob.nextInt();
		name = ob.next();
		address = ob.next();
	}
	
	void display() {
		System.out.println("The rollno is "+rollno);
		System.out.println("The name is "+name);
		System.out.println("The address is "+address);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		test2 ob = new test2();
		
		ob.input();
		ob.display();
		
		System.out.println("the rollno is "+ob.rollno+" the name is "+ob.name+" the address is "+ob.address);
	}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.*;

public class test4 {
	int empno,salary;
	String name,address,dept;

	void input() {		
		Scanner ob = new Scanner(System.in);
		System.out.println("Enter empno , name ,address,dept,salary");
		empno = ob.nextInt();
                ob.nextLine();  // for input a full name use this nextLine()
		name = ob.next();
		address = ob.next();
		dept = ob.next();
		salary = ob.nextInt();
	}
	void display() {
		System.out.println("The empnp is "+empno);
		System.out.println("The name is "+name);
		System.out.println("The address is "+address);
		System.out.println("The dept is "+dept);
		System.out.println("The salary is "+salary);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		test4 ob = new test4();

		ob.input();
		ob.display();

		System.out.println("the empno is :"+ob.empno+" the name is :"+ob.name+" the address is:"+ ob.address + " the dept is:" +ob.dept+ "the salary is :"+ob.salary );
	}

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Getter and Setter 
import java.util.*;

public class Employee {
	
	private int empno;
	private String name,address;
	private float salary;
	
	public Employee (int empno, String name,String address,float salary) {
		this.empno = empno;
		this.name = name;
		this.address = address;
		this.salary = salary;
	}
	
	public Employee() {
		
	}
	
	
	public int getEmpno() {
		return empno;
	}

	public void setEmpno(int empno) {
		this.empno = empno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public float getSalary() {
		return salary;
	}

	public void setSalary(float salary) {
		this.salary = salary;
	}
	
	
	@Override
	public String toString() {
		return "Employee [empno=" + empno + ", name=" + name + ", address=" + address + ", salary=" + salary + "]";
	}


}

--------------------------------------------------
Another Pubilic Class;

public class AccessPublic {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Employee obj = new Employee(101,"Vedant","Aurangabad",1555000.50f);
		System.out.println(obj);
		obj.setEmpno(102);
		System.out.println(obj.getEmpno());
		System.out.println(obj.getName());
		System.out.println(obj.getAddress());
		System.out.println(obj.getSalary());
	}

========================================================================================================================================================
INHERITANCE:
Parent class in inheritance cant be public
we will create object of child class to access parent class

-------------------------------------------------------------------------------
Inheritance
-------------------------------------------------------------------------------
It is one of the oops concept
Reuse of existing code. and we can add some more features to it.
example :- iPhone10 to iPhone15 some new features are add to the older version.
There are 5 types of Inheritance.
1)single Inheritance
2)multi-level Inheritance
3)hierarchal Inheritance
----------------------Java doesn't support---------------------------------
4)multiple inheritance
5)Hybrid inheritance(combination)
------------------------------------------------------------------------------------
we use the keyword extends to inherite the parent class into the child class.
we use the keyword super to access the parent class variables and methods into the child class.
1)The parent class should not be public
2)We will create object of the child class
3) The class name should be the child class name which contain the main ()
4)parent class constructor will execute first then the child class constructor
-------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
1.Single Inheritance Example:
package temp;
import java.util.*;

class Student {  //This is a parent class and parent class cant be public and we create objects of the child class to access the parent class
	int rollno;
	String name,address;
	
	//this is parent class constructor/method which is executed using super() method and will execute first
	public Student(int rollno, String name, String address) 
	{
		this.rollno = rollno;
		this.name = name;
		this.address = address;
	}
	
	//this is parent class constructor/method which is executed using super() method and will execute first
	void display()
	{
	System.out.println("the rollno is "+rollno+"The name is "+name+" The address is "+address);
	}

}

// Note : the class in which main method is present should always be public 
//this class is child class which access parent class Student using extends keyword
public class test1_inheritance extends Student {
	int phy,chem,bio,total,avg;

	public test1_inheritance(int rollno, String name, String address, int phy, int chem, int bio) 
	{
		//super method access 
		super(rollno, name, address);//parent class constructor will execute first(should be at top) and only then child class constructor will get executed
		this.phy = phy;
		this.chem = chem;
		this.bio = bio;
		this.total = phy+chem+bio;
		this.avg =total/3;
	}
	
	void display()
	{
		super.display();  
		System.out.println("the physics marks is "+phy);
		System.out.println("the chemistry marks is "+chem);
		System.out.println("the biology marks is "+bio);
		System.out.println("the physics marks is "+total);
		System.out.println("the physics marks is "+avg);
			
	}
	
	public static void main(String[] args) {
		test1_inheritance obj=new test1_inheritance(101,"sandip","bang",88,66,93);  // this will only insert values in the parent class first then the child class
		obj.display();  // this will display the values
	}
}
=================================================================================================================================
2. Multilevel Inheritance:
//Multilevel Inheritance;'-
// NOTE: In Java, a class cannot directly access the grandparent’s members.



package temp;

//grandparent class : class 1
class employee {
	int empno;
	String name , address;
	
	public employee ( int empno,String name,String address) {
		this.empno = empno;
		this.name = name;
		this.address = address;
	}
	
	void display_employee () {
		System.out.println("Empno :"+empno+" Name:"+name+" Address:"+address);
	}
}

// Parent class : Class 2  access class 1
class dept extends employee  {
	String loc , designation, dept;
	
	public dept ( int empno,String name,String address ,String loc,String designation, String dept) {
		super(empno,name,address);  // parent class constructor will execute first
		this.loc = loc;
		this.designation = designation;
		this.dept = dept;
	}
	
	void display_dept() {
		System.out.println(" loc :"+loc+" Designation:"+designation+" Dept:"+dept);
	}
}

// Child Class : Class 3 access Class 1 and Class 2
class salary extends dept  {
	int salary , hra, income;
	
	public salary ( int empno,String name,String address ,String loc,String designation, String dept , int salary, int hra , int income) {
		super(empno,name,address ,loc,designation,dept);
		this.salary = salary;
		this.hra = hra;
		this.income = income;
	}
	
	void display() {
		super.display_employee();
		super.display_dept();
		System.out.println(" salary :"+salary+" hra:"+hra+" income:"+income);
	}
}



// / Note : the class in which main method is present should always be public 
public class test1_multilevel {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		salary ob = new salary(11,"Vedant","Kharadi","Pune","Java","IT",100000000,400000,200090);
		ob.display();
		

	}

}
======================================================================================================================================
-------------------------------------------------------------------------
*super constructor will execute first.
-----------------------------------------------------------------------
In inheritance the child class will depend upon the parent class. It is known as tight coupling.
Java supports loose coupling.
Inheritance(IS-A) relationship.
Aggregation(HAS-A) relationship.
example:-
Employee has-a address
Bank has-a customer

===========================================================================================================================================
https://www.geeksforgeeks.org/what-is-has-a-relation-in-java/?ref=ml_lbp  --> Study this
1. HAS - A Relationship  (Aggregation)
Step 1: Create file bank.java
Step 2: Create file Customer.java
Step 3: Create mainprg.java

Step 1:
package temp;
import java.util.*;

public class bank {
	int accno;
	String bname, balance;
	Customer cust;
	public bank (int accno,String bname,String balance,Customer cust) {
		this.accno = accno;
		this.bname = bname;
		this.balance = balance;
		this.cust = cust;
	}
	@Override
	public String toString() {
		return "bank [accno=" + accno + ", bname=" + bname + ", balance=" + balance + ", cust=" + cust + "]";
	}
	
	
}
------------------
Step 2:
package temp;

public class Customer {
	String cname,address;
	public Customer(String cname,String address) {
		this.cname = cname;
		this.address = address;
	}
	@Override
	public String toString() {
		return "Customer [cname=" + cname + ", address=" + address + "]";
	}
	
	

}
---------------------
Step 3:
package temp;

public class mainprg {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Customer cs1 = new Customer("Vedant","Banglore");
		Customer cs2 = new Customer("Kiran","Banglore");
		bank bk1 = new bank(101,"SBI","232",cs1);
		bank bk2 = new bank(101,"SBI","232",cs2);
		System.out.println(bk1);
	}

}
--------------------------------------------------------------------------------------------------------------------------------
================================================================================================================================
Enum Declaration: The Day enum defines constants for each day of the week.
--------------------------------------------------------------------
Accessing Enum Values: You can assign an enum value (Day.WEDNESDAY) to a variable.
--------------------------------------------------------------------
Switch Statement: Enums work well with switch statements for clean code.
---------------------------------------------------------
Loop Through Enum Values: The values() method returns an array of all constants in the enum, allowing iteration.
---------------------------------------------------------------------------------------------------
Method Overloading:-
Method Overriding:-
Abstract class
Interface
static keyword
final keyword
---------------------------------------------------------------------------------------------------
polymorphism:-
Method Overloading :- compile time Polymorphism. we need one class.
The method name is same but the return type and parameter has different data type.
example:-
int sum(int a, int b);
float sum(float a, float b);
--------------------------------------------------------
1.Method Overloading:[compile time Polymorphism]
package temp;

// same name but different attributes/parameters is called test1_overloading
public class test1_overloading {

	int sum(int a,int b)
	{
		return a+b;
	}
	int sum(int a,int b,int c)
	{
		return a+b+c;
	}
	float sum(float a,float b)
	{
		return a+b;
	}
	double sum(double a,double b)
	{
		return a+b;
	}
	
	public static void main(String[] args) {
		test1_overloading ob=new test1_overloading();
		System.out.println("the sum is "+ob.sum(6, 7));
		System.out.println("the sum is "+ob.sum(6,7,8));
		System.out.println("the sum is "+ob.sum(6.5f, 7.3f));
		System.out.println("the sum is "+ob.sum(6.53, 7.32));
	}
}
--------------------------------------------------------------------------------------------------------------------------------------
2.---------------------------------------------------------------------------------------------------
Method Overriding:- [Runtime Polymorphism.](abstract class, Interface).we need two or more class.
--------------------------------------------------------------------------------------------------
program-16
---------------------
package Wednesday;
class Parent
{
void display()
{
	System.out.println("This is a parent class");
}
}
public class MethodOverriding extends Parent
{
	void display()
	{
		System.out.println("this is new display method");
	}
	public static void main(String[] args) 
	{
		MethodOverriding ob=new MethodOverriding();
		ob.display();
	}
}

-----------------------------------------------------------------
Here in the parent class we have the display().
In the child class we have display().We are creating object of the child class.
The child class display() is overriding on the parent class display().The parent class display() is hidden.
======================================================================================================================================================================================
======================================================================================================================================================================================
Abstract class
------------------------
It is a class which contain abstract method means method without body.
It can also contain method with body known as concrete method.
we cannot create object of the abstract class.
we have to inherit it into a child class where we have to override the abstract methods.
Then we can create object for the child class.
We cannot have a method without body .we have to declare it as abstract or it should be inside the interface.
What is the use of abstract class.
It contains some abstract methods which has to be overridden inside the child class.
We can have a constructor in the abstract class.
*abstract windowing toolkit(AWT)
package Wednesday;
------------------------------------------------------------
Example:-
package temp;

abstract class bank1{
	abstract void register();
	abstract void deposite();
	abstract void withdraw();
	
	bank1(int a){
		System.out.println("this is a bank customer");
		System.out.println("the value of a is"+a);
	}
}

public class abstract_method extends bank1{
	
	abstract_method(int a) {
		super(a);
		// TODO Auto-generated constructor stub
	}

	@Override
	void register() {
		// TODO Auto-generated method stub
		System.out.println("Customer registration form");
	}

	@Override
	void deposite() {
		// TODO Auto-generated method stub
		System.out.println("Customer Deposited Money");
	}

	@Override
	void withdraw() {
		// TODO Auto-generated method stub
		System.out.println("customer want to withdraw money");
	} 
	
	public static void main(String[] args) {
		abstract_method obj = new abstract_method(10);
		obj.register();
		obj.deposite();
		obj.withdraw();
	}
	
	
}

===========================================================================================================================================================================================================================
Abstract method (STUDY AGAIN)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package temp;

abstract class bank1{
	abstract void register();
	abstract void deposite();
	abstract void withdraw();
	
	bank1(int a){
		System.out.println("this is a bank customer");
		System.out.println("the value of a is"+a);
	}
}

public class abstract_method extends bank1{
	
	abstract_method(int a) {
		super(a);
		// TODO Auto-generated constructor stub
	}

	@Override
	void register() {
		// TODO Auto-generated method stub
		System.out.println("Customer registration form");
	}

	@Override
	void deposite() {
		// TODO Auto-generated method stub
		System.out.println("Customer Deposited Money");
	}

	@Override

	void withdraw() {
		// TODO Auto-generated method stub
		System.out.println("customer want to withdraw money");
	} 
	
	public static void main(String[] args) {
		abstract_method obj = new abstract_method(10);
		obj.register();
		obj.deposite();
		obj.withdraw();
	}
	
	
}
========================================================================================================================================================================================================================
2.Abstract Method
//wap to create a Bank class having accno, name and balance .
//customer can do withdraw or deposite and then see the final balance.
//minimum balance is 1000.
---------------------
package temp;

import java.util.*;

abstract class bank3{
	abstract void register ();
	abstract void deposite();
	abstract void withdraw();
	
	bank3(int a){
		System.out.println("this is a bank customer");
		System.out.println("the value of a is"+a);
	}
}

class abstract_method2 extends bank3{

	int accno;
	String name;
	float bal,deposite,withdraw;
	Scanner ob=new Scanner(System.in);

	abstract_method2(int a) {
		super(a);
	}

	@Override
	void register() {
		System.out.println("enter accno,name and initial balance");
		accno=ob.nextInt();
		name=ob.next();
		bal=ob.nextFloat();
	}

	@Override
	void deposite() {
		System.out.println("Enter the amount want to deposite");
		deposite=ob.nextFloat();
		bal=bal+deposite;
		System.out.println("The final balance is "+bal);
	}

	@Override
	void withdraw() {
		System.out.println("the balance is "+bal);
		System.out.println("Enter the amount want to withdraw");
		withdraw=ob.nextFloat();
		if(bal-withdraw >= 1000)
		{
			bal=bal-withdraw;
			System.out.println("The final balance is"+bal);
		}
		else
			System.out.println("cannot withdraw balance is low");
	}
	
	public static void main(String[] args) 
	{
		abstract_method2 obj = new abstract_method2(10);
		
		Scanner in = new Scanner(System.in);
		System.out.println("1 for deposit");  
		System.out.println("2 for withdraw");
		
		int choise = in.nextInt();
		
		if(choise == 1) {
			obj.deposite();
		}
		else if(choise ==2) {
			obj.withdraw();
		}
		
	}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Interface method:-(Study this again)

Interface:-
It is similar to abstract class but it only contains abstract methods no concrete methods. we don't use the keyword abstract in this.
We cannot create object for an interface.
We have to implement the interface into a child class.
We have to override the abstract methods into a child class and create object for the child class.
By interface java performs the multiple Inheritance.
we can declare a variable inside a interface .this is by default static(we can access it without object )
and final(cann't be changed)
--------------------------------------------------------------------------------------------------
package temp;


interface Interface11{
	void display1();
}


interface Interface2 extends Interface11{
	void display2();
}

interface Interface3{
	void display3();
}

interface Interface4 {
	void display4();
}
 

class test2_interface implements Interface2,Interface3,Interface4 {
	
	@Override
	public void display1() {
				System.out.println("display1");	 
	}
	
	@Override
	public void display4() {
		System.out.println("display4");		
	}
	
	@Override
	public void display3() {
		System.out.println("display3");			
	}
	
	@Override
	public void display2() {
		System.out.println("display2");
	}
	
	 public static void main(String[] args) {
		test2_interface  ob = new test2_interface();
		ob.display1(); 
		ob.display2(); 
		ob.display3();  
		ob.display4();
		
	 }

}
------------------------------------------------------------------
-------------------------------------------------------------
Enum Declaration: The Day enum defines constants for each day of the week.
--------------------------------------------------------------------
Accessing Enum Values: You can assign an enum value (Day.WEDNESDAY) to a variable.
--------------------------------------------------------------------
Switch Statement: Enums work well with switch statements for clean code.
---------------------------------------------------------
Loop Through Enum Values: The values() method returns an array of all constants in the enum, allowing iteration.
---------------------------------------------------------------------------------------------------
Method Overloading:-
Method Overriding:-
Abstract class
Interface
static keyword
final keyword
---------------------------------------------------------------------------------------------------
polymorphism:-
1)runtime polymorphism:-Method Overriding
2)compile time polymorphism :-Method Overloading
Method Overloading :- compile time Polymorphism. we need one class.
The method name is same but the return type and parameter has different data type.
example:-
int sum(int a, int b);
float sum(float a, float b);
--------------------------------------------------------
=============================STATIC METHOD=============================================================================================
When a variable is declared as "static"
, then a single copy of the variable is created and shared among all objects at the class level. Static variables are, essentially, global variables. All instances of the class share the same static variable.
Cant access non static variable inside static method.
[it always runs before the main program]
-----------------------------------------
The static keyword is a non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class.
---------------------------------------
Important points for static variables:
We can create static variables at class-level only. See here
static block and static variables are executed in order they are present in a program.But If declared after the main program but it always runs before the main program
Static variable can call by directly with the help of class only, we do not need to create object for the class in this.
-------------------------------------------------------------------------------------------------------------------

Example1:
package temp;

public class static_demo {

	static int a=10,b=20,c;
//	int te,cd;  these are non static cant be accessed in a static method
	
	static {
		System.out.println("This is a static block");
	}
	
	//FIrst Static blocks will execute then the main method
	//Note: You cannot use non-static variables in a static method
   //	    Cant access non static variable inside static method.
	static void display() {
		c=a+b;
		System.out.println("Sum of two no:"+c);
	}
	
	//Note : Static values can be changed and can be used in a non static method
	void display1() {
		a = 100;b=200;
	}
	
	void display2(int a,int b) {
		a = 1;b=2;
		
		System.out.println("Sum is :"+(a+b));
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//Note : Static and non-static variable can have same variable name
		//So to use static varibale Use Syntax : class_name.variable 
		int a = 111,b=222;
		System.out.println("Value of a:"+a);
		System.out.println("value of b:"+b);
		System.out.println("Value of a:"+static_demo.a);
		System.out.println("value of b:"+static_demo.b);
		display();   //Note : This is a static method [Don`t need to use/declare object to invoke static methods]
		
//		-------------------------------------------------------------------
		//display2 is non static method need to create object to invoke it
		static_demo ob = new static_demo();
		ob.display2(a,b);
		
		System.out.println("Value of a:"+a);
		System.out.println("value of b:"+b);
		display();   //Note : This is a static method [Don`t need to use/declare object to invoke static methods]
		
		ob.display2(a,b);
		//wE CAN INVOKE STATIC METHOD and variables WITH CLASSNAME ALSO EXAMPLE: class_name.method_name  or class_name.variable_name
		System.err.println("value of a :"+a);
		System.err.println("value of b :"+b);
		static_demo.display();
		
	}

}
-------------------------------------------------------------------------INNER CLASS ------------------------------------------------------------------------------------------------------
===========================================================================================================================================================================================
Java Inner Classes
In Java, it is also possible to nest classes (a class within a class). The purpose of nested classes is to group classes that belong together, which makes your code more readable and maintainable.

To access the inner class, create an object of the outer class, and then create an object of the inner class:
-------------------------------------------------------------------------------------------------------------------------------------------------
package temp;

public class OuterClass {
	
	static int rollno = 10;
	static String name = "sandip";
	
	static class inner{
		void display() {
			System.out.println("The rollno is "+rollno);
			System.out.println("The name is "+name);
			
		}
	}
	
    
	//NOTE: Inner Class can be static,non-static and private
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Access inner Class and can create objects using --> Outerclass_name.inner_classname 
		OuterClass.inner obj = new OuterClass.inner();
		obj.display();
	}

}
-----------------------------------------------------------------------------
 final keyword
-------------------------
This is a done to protect the data.
We can declare the variable as final, method as final and class as final.
If we declare variable as final we have to assign it and it cannot be changed.
If we declare method as final we cannot override it.
If we declare a class as final we cannot inherite it.
--------------------------------------------------------------------------------------------------
package temp;

public final class FinalDemo {
	final int a=10;
	
	final void display(){
		System.out.println("this is final display");
	}
	
	public static void main(String[] args) {
		FinalDemo ob=new FinalDemo();
		ob.display();
		System.out.println("the value of a is"+ob.a);
		}
}
==================================================================================================================================================================
-------------------------------------------WRAPPER CASS-----------------------------------------------------------------------------------------------------------
Java Wrapper Classes
Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects.

A Wrapper class in Java is one whose object wraps or contains primitive data types. When we create an object to a wrapper class, it contains a field and in this field, we can store primitive data types. In other words, we can wrap a primitive value into a wrapper class object. Let’s check on the wrapper classes in Java with examples:

Need of Wrapper Classes
There are certain needs for using the Wrapper class in Java as mentioned below:

They convert primitive data types into objects. Objects are needed if we wish to modify the arguments passed into a method (because primitive types are passed by value).
The classes in java.util package handle only objects and hence wrapper classes help in this case.
Data structures in the Collection framework, such as ArrayList and Vector, store only objects (reference types) and not primitive types.
An object is needed to support synchronization in multithreading.
------------------------------------------------------------------------------------------------------------------------------------------------------
package temp;

public class parse_int {

	
	//As we r using the main clkass : We get an error of out of bound
	// So we use Run configuration to input arguments in the string arg[]
	public static void main(String[] arg) {
		// TODO Auto-generated method st
		String a = arg[0];
		String b = arg[1];
		String c = arg[2];
		
		// For conversion of data  type we have to using Wrapper class
//		float x = Float.parseFloat(a);
//		float y = Float.parseFloat(b);
//		float z = Float.parseFloat(c);
//		float sum = x+y+z;
//		System.out.println("The Sum is :"+sum);
		
		System.out.println("The value of a:"+a);
		System.out.println("The value of b:"+b);
		System.out.println("The value of c:"+c);
	}

}
==========================================================================================================================================================
----------------------------------------------------------------------------------------------------------------------------------------------------------
We have 3 classes String, StringBuffer, StringBuilder
----------------------------------------------------------------------------------------------------------------------------------------------------------
String :-Immutable(cannot be changed).
String Buffer:-mutable(can be changed).
StringBuilder:-mutable(can be changed).
----------------------------------------------------------------------------------------------------------------------------------------------------------
String is the type of objects that can store the sequence of characters enclosed by double quotes and every character is stored in 16 bits i.e using UTF 16-bit encoding. 
A string acts the same as an array of characters. Java provides a robust and flexible API for handling strings, allowing for various operations such as concatenation, comparison, and manipulation.
------------------
1. STRINGS IN JAVA
Ways of Creating a Java String
There are two ways to create a string in Java: 

String Literal
Using new Keyword

Syntax:  
<String_Type> <string_variable> = “<sequence_of_string>”;  
----------------------------------------------------------------------------------------------------------------------------
1. String literal (Static Memory)
To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 

Example:
String demoString = “GeeksforGeeks”; 
----------------------------------------------------------------------------------------------------------------------------
2. Using new keyword (Heap Memory)
String s = new String(“Welcome”);
In such a case, JVM will create a new string object in normal (non-pool) heap memory and the literal “Welcome” will be placed in the string constant pool. The variable s will refer to the object in the heap (non-pool)
In the given example only one object will be created. Firstly JVM will not find any string object with the value “Welcome” in the string constant pool, so it will create a new object. After that it will find the string with the value “Welcome” in the pool, it will not create a new object but will return the reference to the same instance.

Example:
String demoString = new String (“GeeksforGeeks”);
-------------------------------------------------------------------------------------------------------------------------------
// Comparison of 2 strings:-
Why Not Use == for String Comparison?
	== operator checks reference equality i.e. whether two variables point to the same memory location.
	The .equals() method is used to compare the content of two strings.
------------
String equals() method in Java compares the content of two strings. It compares the value's character by character, irrespective of whether two strings are stored in the same memory location. 
The String equals() method overrides the equals() method of the object class.
false if any of the characters are not matched.
true if all characters are matched in the Strings.
---------------------------------------------------------------------------------------------------------------------
Example1: String1:-

String equals() method in Java compares the content of two strings. It compares the value's character by character, irrespective of whether two strings are stored in the same memory location. 

The String equals() method overrides the equals() method of the object class.
false if any of the characters are not matched.
true if all characters are matched in the Strings.
--------------------------------------------------------------------------
package temp;

public class String_demo1
{
public static void main(String[] args) 
{
	
//	Why Not Use == for String Comparison?
//	== operator checks reference equality i.e. whether two variables point to the same memory location.
//	The .equals() method is used to compare the content of two strings.
//----------------------------------------------------------------------------------------------------------------
//String equals() method in Java compares the content of two strings. It compares the value's character by character, irrespective of whether two strings are stored in the same memory location. The String equals() method overrides the equals() method of the object class.
//false if any of the characters are not matched.
//true if all characters are matched in the Strings.
	
	//Here Creating Static String :Stores in Stack/Static Memory
	//Whenever we create a new static string with a same string already created (so no new memory block is created) 
	String s1="apple";
	String s2="apple";              // here as same string no  new memory block is created
	
	//Creation of String in Heap Memory (Dynamic String using Dynamic memory allocation)
	//Whenever we create a Dyamic String of every time . It Creates a new memory block every time.
	String s3=new String("apple"); //new memory block is created
	String s4=new String("apple"); //Here also new memory block will get created
	
	if(s1==s2) //constant pool       //This compares the memory block
		System.out.println("true");
	else
		System.out.println("false");
	
	if(s1.equals(s2))   //Check if both strings are same or not(compare two strings)
		System.out.println("true");
	else
		System.out.println("false");
	
	if(s1==s3)
		System.out.println("true");
	else
		System.out.println("false");
	
	//Returns false because Creates new String in Heap memory
	if(s4.equals(s3))
		System.out.println("true");
	else
		System.out.println("false");
}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
package temp;

public class String_demo2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s1="Marlabs Software Solution";
		String s2="Mphasis Software Solution";
		
		System.out.println(s1);
		System.out.println(s1.toLowerCase());
		System.out.println(s1.toUpperCase());
		
		System.out.println(s1.indexOf('M'));   //starts from 0 (gives index)
 	    System.out.println(s1.lastIndexOf('S')); //Gives last occuring index of character
	    System.out.println(s1.equals(s2));         
	    System.out.println(s1.equalsIgnoreCase(s2));
	    
	    System.out.println(s1.substring(1));//starts from 1
	    System.out.println(s1.substring(5,6)); // starts from index 5 and length will be 6
	    
	    System.out.println(s1.charAt(0));//starts from 0
	    System.out.println(s1.startsWith("Marlabs"));//return true or false
	    
	    System.out.println(s1.endsWith("Solution"));
	    System.out.println(s1.replace("Marlabs", "Marlab"));
	    
	    System.out.println(s1.length());
	    
	    //Printing the string 
	    char x[]=s1.toCharArray();//convert string to char array
	    
	    int len=x.length;
	    System.out.println("the length of the array is "+len);
	    for(int i=0;i<len;i++)
	    	System.out.println(x[i]);
    
	}

}
===================================================================================================================================================
4. Reverse the string 
public class ReverseString {
    public static void main(String[] args) {
        String original = "Hello, World!";
        char[] charArray = original.toCharArray();

        // Swap characters from both ends of the array
        for (int i = 0, j = charArray.length - 1; i < j; i++, j--) {
            char temp = charArray[i];
            charArray[i] = charArray[j];
            charArray[j] = temp;
        }

        // Convert the character array back to a string
        String reversed = new String(charArray);
        System.out.println("Reversed String: " + reversed);
    }
}
======================================================================================================================================================
Why Java Strings are Immutable?
Last Updated : 02 Dec, 2024
In Java, strings are immutable means their values cannot be changed once they are created. This feature enhances performance, security, and thread safety. 
In this article, we will explain why strings are immutable in Java and how this benefits Java applications.

What Does Immutable Mean?
An immutable object is an object whose state cannot be modified after it is created. In Java, this concept applies to strings, which means that once a string object is created, its content cannot be changed. If we try 
to change a string, a new string object is created instead.

How are Strings Immutable in Java?
Strings in Java that are specified as immutable, as the content shared storage in a single pool to minimize creating a copy of the same value. String class and all wrapper classes in Java that include Boolean, 
Character, Byte, Short, Integer, Long, Float, and Double are immutable. A user is free to create immutable classes of their own.
======================================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------STRING BUFFER (MUTABLE IN NATURE)------------------------------------------------------------------------------
StringBuffer class in Java
Last Updated : 03 Dec, 2024
StringBuffer is a class in Java that represents a mutable sequence of characters. 
It provides an alternative to the immutable String class, allowing you to modify the contents of a string without creating a new object every time.

Features of StringBuffer Class
Here are some important features and methods of the StringBuffer class:

StringBuffer objects are mutable, meaning that you can change the contents of the buffer without creating a new object.
The initial capacity of a StringBuffer can be specified when it is created, or it can be set later with the ensureCapacity() method.
The append() method is used to add characters, strings, or other objects to the end of the buffer.
The insert() method is used to insert characters, strings, or other objects at a specified position in the buffer.
The delete() method is used to remove characters from the buffer.
The reverse() method is used to reverse the order of the characters in the buffer.
-----------------------------------------------------------------------------------
package temp;

public class String_buffer {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// String Buffer is synchronized in nature
		StringBuffer s1=new StringBuffer("My name ")	;
		StringBuffer s2=new StringBuffer("is sandip ")	;
		StringBuffer s3=new StringBuffer("I am 40 years old");
		
		// In String we cant append another stirng as it is immutablke in nature
		System.out.println(s1.append(s2));
		System.out.println(s1.append(s3));
		
		System.out.println(s1);//mutable the value of the string is changed
		s1.setCharAt(0, 'm');
		System.out.println(s1);
		s1.setLength(20);
		System.out.println(s1);
		
		System.out.println(s1.insert(20, " am a java Trainer"));
		System.out.println(s1.delete(21, 25));
		System.out.println(s1.reverse());
		System.out.println(s1.reverse());
		System.out.println(s1.capacity());

	}

}
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
StringBuffer is synchronized. 
with the methods we use the key word synchronized.
in this after one method complete then the second method start excecuting.
------------------------------------------------------------------------------------------------------
StringBuilder is not synchronized.
StringBuffer takes more time to execute than StringBuilder.
Thread synchronized means one thread complete excecution then the next thread will start execute.
example :-ATM (one person will do the transaction then the second person will do the transaction).
---------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
